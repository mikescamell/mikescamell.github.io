<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Mike Scamell]]></title><description><![CDATA[Android with the occasional dash of food]]></description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>Mike Scamell</title><link>http://localhost:2368/</link></image><generator>Ghost 2.21</generator><lastBuildDate>Tue, 23 Apr 2019 19:17:43 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Bottoms Up! - BottomNavigationView Updates in the Material Components/Design Support Library]]></title><description><![CDATA[The BottomNavigationView has been updated in the Material Components & Design Support Library so you can now set labels, icon sizes, text style and more!]]></description><link>http://localhost:2368/bottoms-up-bottomnavigationview-updates-in-the-material-design-design-support-library/</link><guid isPermaLink="false">5bf1c0a2ca57a5c15ec68668</guid><category><![CDATA[androiddev]]></category><category><![CDATA[bottomnavigationview]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Mon, 18 Jun 2018 23:42:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2019/04/bottomappbar-3.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2019/04/bottomappbar-3.jpg" alt="Bottoms Up! - BottomNavigationView Updates in the Material Components/Design Support Library"><p>I've just removed the design support library and added the new Material Components library (<code>com.google.android.material:material:1.0.0-alpha3</code> as of writing) and currently there's some sea birds outside making noises that are hard to describe. But this is about the <code>BottomNavigationView</code> that resides in there and some updates that have been long awaited. (This should be the same if you update the design support library to <code>28.0.0-alpha3</code>, which just brings the new Material Components support library in instead)</p><p>In retrospect the title of this blog post would probably be better served in a post on the <code>BottomAppBar</code> but I've got nothing better.</p><h2 id="label-me-label-me-good">Label me, label me good</h2><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2018/06/label_mode_on.png" class="kg-image" alt="Bottoms Up! - BottomNavigationView Updates in the Material Components/Design Support Library"></figure><!--kg-card-end: image--><p><em><code>LabelVisibilityMode</code> set to labeled</em></p><p>In some Google apps like YouTube and everyone's #1 social media platform G+, the <code>BottomNavigationView</code> has had labels on all 5 items. People cried out in horror; 1. Because this <em>was</em> against Material Design Guidelines and 2. Because there was no way for them to add labels to all items to all items using the <code>BottomNavigationView</code> provided with the support library.</p><p>Well now you can! All you need to do is set a <code>labelVisibilityMode</code>. This can currently be in one of 4 states.</p><ol><li><code>LABEL_VISIBILITY_LABELED</code> - shows labels on all items. Yes that would mean that 4 or 5 would have labels as well!</li><li><code>LABEL_VISIBILITY_SELECTED</code> - shows a label only on the selected item. This applies even if you only have 3 items or less.</li><li><code>LABEL_VISIBILITY_AUTO</code> - switches between <code>LABEL_VISIBILITY_LABELED</code>and <code>LABEL_VISIBILITY_SELECTED</code>. Basically the "old" BottomNavigationView style; when there's 3 items or less they will be labelled, when it's 4 or more only the selected item is labelled</li><li><code>LABEL_VISIBILITY_UNLABELED</code> - No labels on any items. That means even on 3 or less items.</li></ol><p>You can either set this by:</p><ul><li>Calling <code>setLabelVisibilityMode</code> on your <code>BottomNavigationView</code> programmatically and providing one of the above constants</li><li>Using the <code>app:labelVisibilityMode</code> attribute on the  <code>BottomNavigationView</code> in your layout XML and setting it to either <code>auto</code>, <code>labeled</code>, <code>unlabeled</code> or <code>selected</code></li></ul><p>You can find the docs for the <code>LabelVisibilityMode</code> <a href="https://developer.android.com/reference/com/google/android/material/bottomnavigation/LabelVisibilityMode.html">here</a>.</p><h2 id="super-size-me">Super Size Me</h2><p>You can now set the items icon size by:</p><ul><li>Calling either <code>setItemIconSize</code> with a size in DP (you'll probably need to convert it from pixels though) or <code>setItemIconSizeRes</code> and reference a resource dimension programmatically</li><li>Using the <code>app:itemIconSize</code> attribute on the <code>BottomNavigationView</code> in your layout XML</li></ul><h2 id="keeping-up-appearances">Keeping Up Appearances</h2><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2018/06/custom_font.png" class="kg-image" alt="Bottoms Up! - BottomNavigationView Updates in the Material Components/Design Support Library"></figure><!--kg-card-end: image--><p><em>All label fonts set to Roboto Condensed and bold</em></p><p>You can now also change the text for your items when they are in an active and inactive state by:</p><ul><li>Calling <code>setItemTextAppearanceActive</code> or <code>setItemTextAppearanceInactive</code> with your <code>BottomNavigationView</code> programmatically and reference a style resource id</li><li>Using the <code>app:itemTextAppearanceActive</code> or <code>app:itemTextAppearanceInactive</code> on your <code>BottomNavigationView</code> in your layout XML and providing a style resource id</li></ul><h2 id="that-weird-selection-animation">That Weird Selection Animation</h2><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2018/06/transgif.gif" class="kg-image" alt="Bottoms Up! - BottomNavigationView Updates in the Material Components/Design Support Library"></figure><!--kg-card-end: image--><ul><li>With `ItemHorizontalTranslationEnabled` set to true*</li></ul><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2018/06/2018-06-19-11_22_24.gif" class="kg-image" alt="Bottoms Up! - BottomNavigationView Updates in the Material Components/Design Support Library"></figure><!--kg-card-end: image--><ul><li>With <code>ItemHorizontalTranslationEnabled</code> set to false*</li></ul><p>It maybe just for me, but in the weird translation animation when selecting an item from the <code>BottomNavigationView</code> never felt right. The good news is, if you feel the same as me, then you can now turn it off! You can do this by:</p><ul><li>Calling <code>setItemHorizontalTranslationEnabled</code> with your <code>BottomNavigationView</code> programmatically and set to <code>true</code> or <code>false</code></li><li>Using the <code>app:itemHorizontalTranslationEnabled</code> attribute on your on your <code>BottomNavigationView</code> in your layout XML and providing <code>true</code> or <code>false</code></li></ul><p>One thing to note, this doesn't seem the <code>itemHorizontalTranslationEnabled</code> setting doesn't seem to apply when your <code>LabelVisibilityMode</code> is set to <code>labeled</code> or <code>unlabeled</code>.</p><p>This is all much nicer now! And this should hopefully mean you don't need to use any 3rd party libraries or reflection hacks to change things. Squawk, squawk, fin.</p>]]></content:encoded></item><item><title><![CDATA[A Sloth's guide to learning Kotlin]]></title><description><![CDATA[<p>I'm starting to learn Kotlin. I'm pretty sure a large majority of all Android devs are also doing this right now. There are plenty of blog posts, videos, podcasts, talks etc. etc. being produced. Rather than doing another learn X or whatever about Kotlin blog post, my intention is to</p>]]></description><link>http://localhost:2368/a-sloths-guide-to-learning-kotlin/</link><guid isPermaLink="false">5bf1c039ca57a5c15ec68662</guid><category><![CDATA[androiddev]]></category><category><![CDATA[kotlin]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Sun, 29 Oct 2017 15:02:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/6322945345_2d629d3eb2_b.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/6322945345_2d629d3eb2_b.jpg" alt="A Sloth's guide to learning Kotlin"><p>I'm starting to learn Kotlin. I'm pretty sure a large majority of all Android devs are also doing this right now. There are plenty of blog posts, videos, podcasts, talks etc. etc. being produced. Rather than doing another learn X or whatever about Kotlin blog post, my intention is to post things here that I've found particularly interesting or useful. Therefore, what you're reading is incomplete, may never be completed and might make no f***ing sense. But I'm keen to get things down so that I have something to come back to. And maybe you might find it interesting as well. Or not. It doesn't matter, this isn't for you, this is for future Mike 👋 (Remember to fry the pillow)</p><h3 id="beginner-resources">Beginner resources</h3><h4 id="blog-posts">Blog posts</h4><ul><li><a href="https://blog.bugsnag.com/introduction-to-kotlin/">Introduction to Kotlin</a></li><li><a href="https://gist.github.com/dodyg/5823184">Kotlin Programming Language Cheat Sheet Part 1 </a></li><li><a href="https://techbeacon.com/mastering-kotlin-practical-guide-android-devs">Mastering Kotlin: A practical guide for Android devs</a></li></ul><h3 id="advanced-resources">Advanced Resources</h3><h4 id="blog-posts-1">Blog posts</h4><h3 id="courses">Courses</h3><ul><li><a href="https://www.linkedin.com/learning/kotlin-for-java-developers?u=2007908">Kotlin for Java developers</a></li></ul><h3 id="language-features">Language Features</h3><h4 id="properties">Properties</h4><p>What's the difference between a <code>field</code> in Java and a <code>property</code> in Kotlin? There's a lot more to a property in Kotlin, the default includes accessors and you can even do propert delegation. <a href="https://blog.kotlin-academy.com/kotlin-programmer-dictionary-field-vs-property-30ab7ef70531">This</a> article explains it all well.</p><h4 id="list">List</h4><p>Usually in Java I would new up an <code>ArrayList</code> and then <code>add</code> everything I needed to it, line after line after line...No more! While you can do it that way in Kotlin, you can also do this:</p><pre><code>val strings = arrayListOf("Android", "Snacks", "Rocks)
</code></pre><p>This will give me an <code>ArrayList</code> of <code>String</code> without the need for all those extra lines. There's also <code>listOf</code>, <code>mutableListOf</code>, <code>listOfNotNull</code> and <code>emptyList</code>.</p><h4 id="singletons">Singletons</h4><h6 id="singleton-with-single-argument">Singleton with single argument</h6><p>If you need to create a Singleton with an argument then you need to check out <a href="https://medium.com/@BladeCoder/kotlin-singletons-with-argument-194ef06edd9e">this</a> blog post by Christoper Beyls which shows how to implement a double locking mechanism in Kotlin.</p><h4 id="sealed-classes">Sealed Classes</h4><p><a href="https://medium.com/livefront/tidy-up-your-observable-streams-with-kotlins-sealed-classes-ce7bdce9c270">This</a> is a great example (and explanation) on how they can be used to handle success and errors in an RxJava stream.</p><p><a href="https://antonioleiva.com/sealed-classes-kotlin/">https://antonioleiva.com/sealed-classes-kotlin/</a></p><h4 id="inlining">Inlining</h4><p>Properties in Kotlin can be inlined! this will help produce more optimal bytecode.<br><a href="https://blog.egorand.me/inlining-kotlin-properties/">https://blog.egorand.me/inlining-kotlin-properties/</a></p><h4 id="custom-property-delegates">Custom Property Delegates</h4><p><a href="https://robots.thoughtbot.com/kotlin-is-dope-and-so-are-its-custom-property-delegates">https://robots.thoughtbot.com/kotlin-is-dope-and-so-are-its-custom-property-delegates</a></p><p><a href="https://blog.kotlin-academy.com/superpowers-of-kotlin-delegation-e6bd9ff8026c">https://blog.kotlin-academy.com/superpowers-of-kotlin-delegation-e6bd9ff8026c</a></p><h4 id="-jvmsuppresswildcards">@JvmSuppressWildcards</h4><p><a href="http://adavis.info/2017/08/jvmsuppresswildcards-biggest-annoyance-kotlin.html">http://adavis.info/2017/08/jvmsuppresswildcards-biggest-annoyance-kotlin.html</a></p><h4 id="run-with-let-also-and-apply">Run, with, let, also and apply</h4><p><a href="https://android.jlelse.eu/mastering-kotlin-standard-functions-run-with-let-also-and-apply-9cd334b0ef84">https://android.jlelse.eu/mastering-kotlin-standard-functions-run-with-let-also-and-apply-9cd334b0ef84</a></p><h3 id="gotchas">Gotchas</h3><p><a href="https://medium.com/@xzan/the-drawbacks-of-migrating-to-kotlin-51f49a96107a">https://medium.com/@xzan/the-drawbacks-of-migrating-to-kotlin-51f49a96107a</a></p>]]></content:encoded></item><item><title><![CDATA[Shared Element Transitions - Updates]]></title><description><![CDATA[<p>I didn't expect to get so many views on my Shared Element Transition blog series. But making it into <a href="https://www.androiddevdigest.com/">Android Dev Digest</a> and <a href="http://androidweekly.net/">Android Weekly</a> has increased the number of people looking at my work. I'm happy and proud of this achievement. With so many people looking it, it has</p>]]></description><link>http://localhost:2368/shared-element-transitions-updates/</link><guid isPermaLink="false">5bf1bfd4ca57a5c15ec6865d</guid><category><![CDATA[androiddev]]></category><category><![CDATA[sharedelementtranistions]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Tue, 07 Mar 2017 15:13:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/Updates-1.png" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/Updates-1.png" alt="Shared Element Transitions - Updates"><p>I didn't expect to get so many views on my Shared Element Transition blog series. But making it into <a href="https://www.androiddevdigest.com/">Android Dev Digest</a> and <a href="http://androidweekly.net/">Android Weekly</a> has increased the number of people looking at my work. I'm happy and proud of this achievement. With so many people looking it, it has also led to some clarifications and fixing of some mistakes. This has been great for me, I've learned a lot more about Shared Element Transitions, though obviously I never wanted this to be a result of misinformation from my posts.</p><p>For that reason, I've gone back through my posts and updated them accordingly, either correcting or clarifying them. Where necessary, some text has been struck through. Code wise, it would be best to look at the commits that I've made to see the changes. The commit messages should be explanation enough of why they have been changed. There's a <a href="https://github.com/mikescamell/shared-element-transitions/pull/5">pull request</a> which tidies a lot of code up such as moving animal names to <code>strings.xml</code> and removing unused attributes. When the code samples in the posts have been updated it will be merged in.</p><p>I'm going to add quick summaries of the changes of the posts here. Just so you don't have to go back all the way through to check.</p><h3 id="part-1-activities"><a href="http://mikescamell.com/shared-element-transitions-part-1/">Part 1 - Activities</a></h3><ul><li> Clarified that <code>transitionName</code> needs to be unique in the view hierarchy and not necessarily the same on the two views that the Shared Element Transition is taking place using. </li><li> Used <code>ViewCompat.getTransitionName</code> in code sample for creating <code>ActivityOptionsCompat</code> instead of using <code>getString</code>. </li></ul><h3 id="part-2-fragments"><a href="http://mikescamell.com/shared-element-transitions-part-2/">Part 2 - Fragments</a></h3><ul><li>Used <code>ViewCompat.getTransitionName</code> in code sample when creating a <code>FragmentTransaction</code> and explained that we use it as we know both <code>transitionName</code> are the same in both <code>Fragment</code> layouts.</li></ul><h3 id="part-3-picasso-glide"><a href="http://mikescamell.com/shared-element-transitions-part-3/">Part 3 - Picasso &amp; Glide</a></h3><ul><li>Used <code>ViewCompat.getTransitionName</code> in code samples for creating <code>ActivityOptionsCompat</code> instead of using <code>getString</code>.</li></ul><h3 id="part-4-recyclerview"><a href="http://mikescamell.com/shared-element-transitions-part-4-recyclerview/">Part 4 - RecyclerView</a></h3><ul><li> Used <code>ViewCompat.getTransitionName</code> on the passed through <code>ImageView</code> in code samples for creating <code>ActivityOptionsCompat</code> instead of using a <code>String</code> passed through as part of a parameter in the <code>AnimalItemClickListener</code>. This means simpler code. </li><li> Made note that the <code>transitionName</code> can be set on the <code>AnimalDetailActivity</code> or <code>AnimalDetailFragment</code> <code>ImageView</code> in XML, as a <code>transitionName</code> needs to only be unique for its view hierarchy. </li><li> Changed the code example of the <code>AnimalGalleryAdapter</code> to use the Animal name as a unique <code>transitionName</code> rather than using the position in the RecyclerView which could be volatile. It's better to use some unique identifier on your derived from your model. </li><li> I intend to update the ViewPager code example with a way to do the Shared Element Transition when returning to the list when you've moved in the ViewPager. If you'd like to be notified then watch this <a href="https://github.com/mikescamell/shared-element-transitions/issues/3">issue</a>. </li></ul><h3 id="part-5-fixing-flashing-blinking"><a href="http://mikescamell.com/shared-element-transitions-part-5/">Part 5 - Fixing Flashing/Blinking</a></h3><ul><li>Added a link to an explanation on the reason you can't exclude <code>Toolbar</code> from a transition by default.</li></ul><p>If you'd like clarification on any of the above then please post in the comments.</p><p>Lastly, you should definitely go watch this video from io16 on transitions, even if it's just the first 8 minutes!</p><figure class="kg-card kg-embed-card"><iframe width="480" height="270" src="https://www.youtube.com/embed/4L4fLrWDvAU?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><p>A big thanks to <a href="https://twitter.com/keyboardsurfer">Benjamin Weiss</a>, <a href="https://twitter.com/crafty">Nick Butcher</a>, <a href="https://plus.google.com/+ChristopheBeyls">Christophe Beyls</a>, Keith Smyth, David Cryer and <a href="https://github.com/jonathan-caryl">Jonathan Caryl</a> for keeping me on my toes. Much appreciated 🙂</p><p>And also a big thanks to everyone that's been reading them all, I hope I've been of some help and there will be more to come in the future.</p>]]></content:encoded></item><item><title><![CDATA[Shared Element Transitions - Part 5:  Fixing Flashing/Blinking]]></title><description><![CDATA[A tutorial to show how to fix the flashing/blinking when using Shared Element Transitions on Android.]]></description><link>http://localhost:2368/shared-element-transitions-part-5/</link><guid isPermaLink="false">5bf1bf65ca57a5c15ec68658</guid><category><![CDATA[sharedelementtranistions]]></category><category><![CDATA[androiddev]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Tue, 28 Feb 2017 12:38:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/flash_fix.png" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/flash_fix.png" alt="Shared Element Transitions - Part 5:  Fixing Flashing/Blinking"><p>In <a href="http://mikescamell.com/shared-element-transitions-part-4-recyclerview/">part 4</a> of the series we explored combining Shared Element Transitions with <code>RecyclerView</code>.</p><p>In part 5 we're going to fix the white flashing or blinking that you may have seen throughout the series during the transition from screen to screen.</p><p>This part was going to be longer but I was slowed down by what I think is a <a href="https://code.google.com/p/android/issues/detail?id=235038&amp;thanks=235038&amp;ts=1488123707">bug</a> that I found on my Nexus 6P on 7.1.2. My advice, therefore, for this part, is to make sure the device you're using is NOT on 7.1.2. Just in case you run into the same issues I did.</p><h2 id="going-back-to-the-start">Going back to the start</h2><p>"What flashing and blinking?" I might hear you say. Take a look at this video and pay attention to the status bar, navigation bar and action bar.</p><figure class="kg-card kg-embed-card"><iframe width="459" height="344" src="https://www.youtube.com/embed/WXVywnBSjAo?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><p>In <a href="http://mikescamell.com/shared-element-transitions-part-1/">part 1</a> I mentioned that Shared Element Transitions take part in the windows <code>ViewOverlay</code>. This <code>ViewOverlay</code> sits on top of everything including the status bar and the navigation bar. It is also where the Shared Element Transitions take place. So when we do our Shared Element Transition, the first and second window are animating (typically a fade) and that's why we get the white flashing; the alpha is animating out on the first screen and animating in on the second screen. So how do we get around this? We need to exclude the views we don't want animating during the Shared Element Transition by excluding them from the window transition.</p><p>For the next few examples I've added in a <code>Toolbar</code> as I believe a lot of you will be using one. It's something else that needs to be taken into consideration as well.</p><h2 id="fixing-flashing-with-activities">Fixing Flashing with Activities</h2><h3 id="programmatic">Programmatic</h3><p>Our <code>ProgrammaticActivityA</code> is setup exactly the same way that the other Activity example have been  in regards to Shared Element Transitions so head back and <a href="http://mikescamell.com/shared-element-transitions-part-3/">take a look</a> if you haven't already. The key part is this next piece of code:</p><pre><code>@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_flash_fix_a);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            Fade fade = new Fade();
            fade.excludeTarget(R.id.appBar, true);
            fade.excludeTarget(android.R.id.statusBarBackground, true);
            fade.excludeTarget(android.R.id.navigationBarBackground, true);

            getWindow().setEnterTransition(fade);
            getWindow().setExitTransition(fade);
        }

        //Button setup
    }
</code></pre><p>Line 8 we do our obligatory check to make sure we're on 21+. Line 9 we create a Fade <code>Transition</code> (Note it can be any type of <code>Transition</code> you like). It's this <code>Transition</code> where we're going to add the views that we want to exclude. First up on line 10 is the <code>AppBarLayout</code> that contains our <code>Toolbar</code>. We call <code>excludeTarget</code> on the <code>Fade</code> which can take a <code>String</code>, <code>View</code>, <code>Class</code> or the <code>id</code> of the view as it's first parameter. We're going to be using the <code>id</code>. If you add the <code>id</code> of the <code>Toolbar</code> instead of the <code>AppBarLayout</code> then it won't work. See Nick Butcher's <a href="http://mikescamell.com/shared-element-transitions-part-5/#comment-3180908415">comment</a> for why this is the case. The second parameter it takes is a <code>boolean</code> which sets whether we want to exclude it or not. We're going to be setting this to <code>true</code> on all our calls as we want to exclude them.</p><p>Line 11 and 12 we add the id for the <code>statusBarBackground</code> and the <code>navigationBarBackground</code> by accessing the <code>android</code> resources. Again, we set the second parameter to <code>true</code>.</p><p>Finally we set the <code>Fade</code> as the enter transition and exit transition for our <code>ProgrammaticActivityA</code>.</p><p><code>ProgrammaticActivityB</code> has the exact same code as above, so I won't repeat it here. But you can go see this for yourself in the source code. And that's all that's needed when doing it programmatically.</p><h2 id="xml">XML</h2><p>We can also solve this problem by creating a transition in XML and applying that through a theme to our activities. So first we need to add a<code>Transition</code> into a <code>transition</code> package in our resources directory.</p><pre><code>&lt;fade xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;targets&gt;
        &lt;target android:excludeId="@android:id/statusBarBackground" /&gt;
        &lt;target android:excludeId="@android:id/navigationBarBackground" /&gt;
        &lt;target android:excludeId="@id/appBar" /&gt;
    &lt;/targets&gt;
&lt;/fade&gt;
</code></pre><p>Here in this <code>default_window_fade</code> XML we have a <code>Fade</code> <code>Transition</code>. Within this we add our targets for exclusion, much like the above programmatic example.</p><p>Next we need to create a theme to apply the <code>default_window_fade</code> to our <code>Activity</code> themes. In the <code>styles.xml</code> we add the following:</p><pre><code>    &lt;style name="AppTheme.NoActionBar.DefaultActivity"&gt;
        &lt;item name="android:windowEnterTransition"&gt;@transition/default_window_fade&lt;/item&gt;
        &lt;item name="android:windowExitTransition"&gt;@transition/default_window_fade&lt;/item&gt;
    &lt;/style&gt;
</code></pre><p>Here we're simply setting the enter and exit <code>Transition</code> of the window to be our <code>default_window_fade</code>.</p><p>Lastly we need to set this as the theme for our <code>FlashFixActivityA</code> and <code>FlashFixActivityB</code> in the manifest.</p><pre><code>        &lt;activity
            android:name=".flash_fix.xml_activity.FlashFixXmlActivityA"
            android:theme="@style/AppTheme.NoActionBar.DefaultActivity" /&gt;
        &lt;activity
            android:name=".flash_fix.xml_activity.FlashFixXmlActivityB"
            android:theme="@style/AppTheme.NoActionBar.DefaultActivity" /&gt;
</code></pre><p>And that's all that's needed. Again, the code for the <code>Activity</code> looks identical to those used in a previous <a href="http://mikescamell.com/shared-element-transitions-part-3/">post</a>.</p><p><code>Fragment</code> doesn't seem to suffer the same issues as <code>Activity</code> when it come to the blinking and flashing, at least with the status and navigation bar. I believe this is likely due to it's <code>ViewOverlay</code> being confined to the content area of the holding <code>Activity</code>. If this does occur for you please let me know and provide an example. I believe that if it is a problem for you it may be remedied by supplying an XML <code>Transition</code> like above as part of the <code>FragmentTransaction</code></p><p>With all this done the status bar and navigation bar should no longer flash/blink!</p><figure class="kg-card kg-embed-card"><iframe width="459" height="344" src="https://www.youtube.com/embed/qIlV7MHkaNI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><p>Source code can be found <a href="https://github.com/mikescamell/shared-element-transitions">here</a> under the <code>flash_fix</code> package.</p><p>This is obviously applicable to the <code>RecyclerView</code> examples in <a href="http://mikescamell.com/shared-element-transitions-part-4-recyclerview/">part 4</a>, but I'll leave it as an exercise to you. It should be easy to implement with the above code.</p><p>I want to move into more complex examples, so my next post may not be out for a few weeks. If there's anything you want to see specifically and you think it can be of use to a lot of people then please let me know.</p>]]></content:encoded></item><item><title><![CDATA[Shared Element Transitions - Part 4: RecyclerView]]></title><description><![CDATA[A tutorial to show how to implement Shared Element Transitions on Android when using a RecyclerView and going to a new Activity, Fragment or ViewPager.]]></description><link>http://localhost:2368/shared-element-transitions-part-4-recyclerview/</link><guid isPermaLink="false">5bf1beebca57a5c15ec68652</guid><category><![CDATA[androiddev]]></category><category><![CDATA[sharedelementtranistions]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Tue, 21 Feb 2017 15:01:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/recycler_view_feature-2.png" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/recycler_view_feature-2.png" alt="Shared Element Transitions - Part 4: RecyclerView"><p>In <a href="http://mikescamell.com/shared-element-transitions-part-3/">part 3</a> of the series we looked at how to implement Shared Element Transitions when using Picasso or Glide.</p><p>In part 4 we're going to look at implementing them with <code>RecyclerView</code>, a popular use case with apps that have Shared Element Transitions. An example of this is Google Play Music, which i mentioned in <a href="http://mikescamell.com/shared-element-transitions-part-1/">part 1</a>, but there are plenty more out there.  Pocket Casts is another good example:</p><figure class="kg-card kg-embed-card"><iframe width="459" height="344" src="https://www.youtube.com/embed/Jvu8lJIWNgA?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><p>We're going to make something similar, going from a gallery of Animals to a detail page telling us a bit more info. Here's our two screens:</p><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/02/recycler_view_example.jpg" class="kg-image" alt="Shared Element Transitions - Part 4: RecyclerView"></figure><p>I'm going to show three examples. Two using <code>Activity</code> and <code>Fragment</code> to go from a <code>RecyclerView</code> to a simple detail view. Finally one going from a <code>RecyclerView</code> to a <code>ViewPager</code>.</p><p>There's one key point that I want to get across, in case you decide to skip to other parts of the post. That is that Shared Element Transitions need a UNIQUE transition name. This is easy to forget but is key when doing them with <code>RecyclerView</code>. Enough chuff, let's get on with it!</p><h2 id="common-code">Common Code</h2><p>First of all lets look at some common code to all the examples. Let's start with the layout for the gallery items.</p><h3 id="animal-gallery-item-layout">Animal Gallery Item Layout</h3><pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="150dp"
    android:layout_marginBottom="16dp"&gt;

    &lt;ImageView
        android:id="@+id/item_animal_square_image"
        android:layout_width="match_parent"
        android:layout_height="match_parent" /&gt;

&lt;/RelativeLayout&gt;
</code></pre><p>Nothing fancy, but the key thing to note is there is NO <code>transitionName</code> attribute set on the <code>ImageView</code>.</p><h3 id="animal-gallery-adapter">Animal Gallery Adapter</h3><pre><code>public class AnimalGalleryAdapter extends RecyclerView.Adapter&lt;AnimalGalleryAdapter.ImageViewHolder&gt; {

    private final AnimalItemClickListener animalItemClickListener;
    private ArrayList&lt;AnimalItem&gt; animalItems;

    public AnimalGalleryAdapter(ArrayList&lt;AnimalItem&gt; animalItems, AnimalItemClickListener animalItemClickListener) {
        this.animalItems = animalItems;
        this.animalItemClickListener = animalItemClickListener;
    }

    ....

    @Override
    public void onBindViewHolder(final ImageViewHolder holder, int position) {
        final AnimalItem animalItem = animalItems.get(position);

        Picasso.with(holder.itemView.getContext())
                .load(animalItem.imageUrl)
                .into(holder.animalImageView);

        ViewCompat.setTransitionName(holder.animalImageView, animalItem.name);

        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                animalItemClickListener.onAnimalItemClick(holder.getAdapterPosition(), animalItem, holder.animalImageView);
            }
        });
    }
}
</code></pre><p>Here we have our <code>AnimalGalleryAdapter</code>. This will be used throughout all the examples to show the gallery images.</p><p>On line 6 in the constructor we ask for an <code>AnimalItemClickListener</code> which will handle calling back to the relevant <code>Activity</code> or <code>Fragment</code> to launch the animal detail screen.</p><p>The <code>onBindViewHolder</code> method is where we set the <code>transitionName</code>. As previously mentioned, this has to be unique in the view hierarchy, so we <s>construct one with an arbitrary string and append the position of the item onto the end.</s> use the Animal's name as we know this will be unique. It's best if you can use some unique identifier derived from your model. If we set the <code>transitionName</code> in XML then all <code>ImageView</code> in the gallery would have the same one, which means when we came back to the gallery the framework would have no idea where to move the image to. Which results in some weird image movement and clashing! Line 21 we set the <code>transitionName</code> on the <code>ImageView</code> using <code>ViewCompat</code>. <s>Line 23 we set the dynamic <code>transitionName</code> on the <code>ImageView</code>.</s></p><p>We fire <code>onAnimalItemClick</code> on line 26 when an image is tapped. We give it the position, the <code>AnimalItem</code> that was clicked, and finally the <code>ImageView</code>. <s>and finally <code>transitionName</code>. The <code>transitionName</code> isn't entirely necessary as we set it on the <code>ImageView</code>, but it help keeps the code cleaner as calling <code>getTransitionName</code> on an <code>ImageView</code> is only available 21+.</s> We can use <code>ViewCompat</code> to call <code>getTransitionName</code> on the <code>ImageView</code> as we have done in previous examples.</p><h3 id="animal-item">Animal Item</h3><pre><code>public class AnimalItem implements Parcelable {

    public String name;
    public String detail;
    public String imageUrl;

    ...
}
</code></pre><p>Our AnimalItem is pretty simple. We need the image URL to tell Picasso (can easily be swapped for Glide) what image to load in our detail <code>Activity</code> or <code>Fragment</code>. It's also <code>Parcelable</code> so we can pass on through by adding to the extras <code>Bundle</code> of the <code>Intent</code>.</p><h2 id="recyclerview-to-activity">RecyclerView to Activity</h2><p>This is probably the most simple to implement. In our <code>RecyclerViewActivity</code> we just need to handle the <code>onAnimalItemClick</code> and launch the <code>AnimalDetailActivity</code>.</p><pre><code>public class RecyclerViewActivity extends AppCompatActivity implements AnimalItemClickListener {

    //Code to setup the RecyclerView and Adapter

    @Override
    public void onAnimalItemClick(int pos, AnimalItem animalItem, ImageView sharedImageView) {
        Intent intent = new Intent(this, AnimalDetailActivity.class);
        intent.putExtra(EXTRA_ANIMAL_ITEM, animalItem);
        intent.putExtra(EXTRA_ANIMAL_IMAGE_TRANSITION_NAME, ViewCompat.getTransitionName(sharedImageView));

        ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(
                this,
                sharedImageView,
                ViewCompat.getTransitionName(sharedImageView));

        startActivity(intent, options.toBundle());
    }

}
</code></pre><p>Line 8 and 9 we put our <code>AnimalItem</code> and <code>transitionName</code> in the <code>Bundle</code> to be passed through to the <code>AnimalDetailActivity</code>. Line 11-14 we do what we did in <a href="http://mikescamell.com/shared-element-transitions-part-1/">part 1</a> and create <code>ActivityOptions</code> using the <code>ImageView</code> passed through from the <code>AnimalGalleryAdapter</code>. <s>and the <code>transitionName</code>.</s> We add the <code>ActivityOptions</code> when we call <code>startActivity</code> on line 16.</p><p>Now we need to setup the <code>AnimalDetailActivity</code>.</p><pre><code>public class AnimalDetailActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_animal_detail);
        supportPostponeEnterTransition();

        Bundle extras = getIntent().getExtras();
        AnimalItem animalItem = extras.getParcelable(RecyclerViewActivity.EXTRA_ANIMAL_ITEM);

        ImageView imageView = (ImageView) findViewById(R.id.animal_detail_image_view);
        TextView textView = (TextView) findViewById(R.id.animal_detail_text);
        textView.setText(animalItem.detail);

        String imageUrl = animalItem.imageUrl;
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            String imageTransitionName = extras.getString(RecyclerViewActivity.EXTRA_ANIMAL_IMAGE_TRANSITION_NAME);
            imageView.setTransitionName(imageTransitionName);
        }

        Picasso.with(this)
                .load(imageUrl)
                .noFade()
                .into(imageView, new Callback() {
                    @Override
                    public void onSuccess() {
                        supportStartPostponedEnterTransition();
                    }

                    @Override
                    public void onError() {
                        supportStartPostponedEnterTransition();
                    }
                });
    }
}
</code></pre><p>We need to stop the <code>AnimalDetailActivity</code> loading before Picasso has finished loading the image from the image url. So line 7 we call <code>supportPostponeEnterTransition</code> to tell it to wait. Line 19 we get the <code>transitionName</code> from the <code>extras</code> and set it on the <code>ImageView</code> of the <code>AnimalDetailActivity</code>. This is key, as we DON'T set the <code>transitionName</code> in the layout XML of the <code>AnimalDetailActivity</code>. <s>This is because we don't know it until someone has actually clicked an Animal from the gallery. So we have to set it dynamically.</s> It's not necessary though, and if you wanted you could set this on the <code>ImageView</code> via the layout if you like, but you'd need to set it when creating the <code>ActivityOptionsCompat</code> in <code>RecyclerViewActivity</code>. Line 23-36 we use Picasso to load the image and in the <code>onSuccess</code> and <code>onError</code> methods of the callback we tell the <code>AnimalDetailActivity</code> that it can now launch by calling <code>supportStartPostponedEnterTransition</code>. This was talked about in detail in <a href="http://mikescamell.com/shared-element-transitions-part-3/">part 3</a>. With that everything should work!</p><figure class="kg-card kg-embed-card"><iframe width="459" height="344" src="https://www.youtube.com/embed/B_TUNYnnXo4?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><h2 id="recyclerview-to-fragment">RecyclerView to Fragment</h2><p>There's not too much difference between using a <code>Fragment</code> compared with the above code for the <code>Activity</code> example. So I'm just going to touch on the key differences. Here's our <code>RecyclerViewFragment</code> which gets loaded from the <code>Activity</code> that holds the Fragments.</p><pre><code>public class RecyclerViewFragment extends Fragment implements AnimalItemClickListener {

    //Code to setup RecyclerView and Adapter

    @Override
    public void onAnimalItemClick(int pos, AnimalItem animalItem, ImageView sharedImageView, String transitionName) {
        Fragment animalDetailFragment = AnimalDetailFragment.newInstance(animalItem, transitionName);
        getFragmentManager()
                .beginTransaction()
                .addSharedElement(sharedImageView, ViewCompat.getTransitionName(sharedImageView))
                .addToBackStack(TAG)
                .replace(R.id.content, animalDetailFragment)
                .commit();
    }
}
</code></pre><p>In the <code>onAnimalItemClick</code> method we create our <code>FragmentTransaction</code>. On line 10 we add the <code>ImageView</code> <s>and dynamic <code>transitionName</code></s> that has been passed through from the <code>AnimalGalleryAdapter</code>. We use it to get the <code>transitionName</code>. Just like the <code>Activity</code> example, we need to pass through our <code>AnimalItem</code> and <code>transitionName</code> which we do when creating our <code>Fragment</code> on line 7.</p><pre><code>public class AnimalDetailFragment extends Fragment {

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        postponeEnterTransition();
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            setSharedElementEnterTransition(TransitionInflater.from(getContext()).inflateTransition(android.R.transition.move));
        }
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        AnimalItem animalItem = getArguments().getParcelable(EXTRA_ANIMAL_ITEM);
        String transitionName = getArguments().getString(EXTRA_TRANSITION_NAME);

        TextView detailTextView = (TextView) view.findViewById(R.id.animal_detail_text);
        detailTextView.setText(animalItem.detail);

        ImageView imageView = (ImageView) view.findViewById(R.id.animal_detail_image_view);
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            imageView.setTransitionName(transitionName);
        }

        Picasso.with(getContext())
                .load(animalItem.imageUrl)
                .noFade()
                .into(imageView, new Callback() {
                    @Override
                    public void onSuccess() {
                        startPostponedEnterTransition();
                    }

                    @Override
                    public void onError() {
                        startPostponedEnterTransition();
                    }
                });
    }
}
</code></pre><p>Again, just like the <code>Activity</code> example we have to tell the <code>Fragment</code> to wait to load until we tell it so by calling <code>postponeEnterTransition()</code> on line 7. Line 9 we call <code>setSharedElementTransition()</code> otherwise we won't get one and we just inflate the transition <code>move</code> from the Android resources to tell it what type of <code>Transition</code> we want.</p><p>Line 25 we set the <code>transitionName</code> on the <code>ImageView</code>. <s>as it's dynamic.</s> Like the Actvivity example, this isn't necessary and we could just set a <code>transitionName</code> via XML and then use it here. We load the image using Picasso (28-41) and make sure we call <code>startPostponedEnterTransition()</code> in the image load callback's <code>onSuccess()</code> and <code>OnError()</code> methods so that the <code>Fragment</code> actually loads.</p><p>So as you can see, apart from the <code>Fragment</code> specific calls, the <code>Activity</code> and <code>Fragment</code> examples are both pretty much the same. I won't post a video as it's identical to the one above for the <code>Activity</code>!</p><h2 id="bonus-recyclerview-to-viewpager">Bonus: RecyclerView to ViewPager</h2><p>I was asked about this scenario last week and so I've decided to throw it in as well. There's just one caveat to this example. As you'll likely know the nature of a ViewPager is that you can swipe to change pages. This proves an issue with a Shared Element Transition's return transition. You might have moved in the ViewPager and no longer have the <code>View</code> you did the Shared Element Transition with in the first place. If you do there's also the chance you'll be on an adjacent page, so when you press back the first image transitions back rather than the one that you are on. Take a look at the video to see what I mean.</p><figure class="kg-card kg-embed-card"><iframe width="459" height="344" src="https://www.youtube.com/embed/gy3i4UDmuTo?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><p>There's hardly any difference in code to the above <code>Fragment</code> example apart from using a <code>ViewPager</code> and this little snippet:</p><pre><code>public class AnimalViewPagerFragment extends Fragment {

    ///Other setup code

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        postponeEnterTransition();
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            setSharedElementEnterTransition(TransitionInflater.from(getContext()).inflateTransition(android.R.transition.move));
        }
        setSharedElementReturnTransition(null);
    }
}
</code></pre><p>On line 12 we call <code>setSharedElementReturnTransition()</code> and set it to <code>null</code> so that it doesn't perform a return Shared Element Transition. This way, when the back buttons pressed, there'll be no odd return transition. If you know a way round this I'd be keen to hear, I have a few ideas myself but I ran out of time this week to try them! Note I'm calling this on the <code>Fragment</code> that's going to be created, NOT the one that's loading it. It'll look something like this:</p><figure class="kg-card kg-embed-card"><iframe width="459" height="344" src="https://www.youtube.com/embed/SlmWd-45KtY?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><p>And that's it for this week. In part 5 I'll be focusing on gotchas. We'll use some of the previous examples and get them into a state when we no longer have that nasty white flash! If you haven't seen it go back and look at some of the videos above. You'll never unsee it again! We'll also look at stopping the images overlapping the navigation and status bars.</p><p>The source code for this can be found <a href="https://github.com/mikescamell/shared-element-transitions">here</a> under the package <code>recycler_view</code>.</p><p><em>Update (5/03/17): I've made some minor adjustments to this post since first releasing. There's nothing better than having 1000's of eyes on your work for reviewing!</em></p>]]></content:encoded></item><item><title><![CDATA[Shared Element Transitions - Part 3: Picasso & Glide]]></title><description><![CDATA[A tutorial to show how to implement Shared Element Transitions on Android using Picasso and Glide libraries in Activities and Fragments.]]></description><link>http://localhost:2368/shared-element-transitions-part-3/</link><guid isPermaLink="false">5bf1be86ca57a5c15ec6864d</guid><category><![CDATA[androiddev]]></category><category><![CDATA[sharedelementtranistions]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Tue, 14 Feb 2017 14:40:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/shared_elements_part_3-6.png" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/shared_elements_part_3-6.png" alt="Shared Element Transitions - Part 3: Picasso & Glide"><p>In <a href="http://mikescamell.com/shared-element-transitions-part-2/">part 2</a> of this series we looked at guidelines for implementing our Shared Element Transitions and also how we utilise them when going from <code>Fragment</code> to <code>Fragment</code>.</p><p>In part 3 we're going to look at how we can tie together our previous examples using <a href="http://square.github.io/picasso/">Picasso</a> and <a href="https://github.com/bumptech/glide">Glide</a> image loading libraries. These two are probably the most widely used but if you use something else then you can likely still follow the concepts and get the same results.</p><h2 id="picasso">Picasso</h2><p>We're going to be loading our images in both <code>PicassoActivityA</code> and <code>PicassoActivityB</code> using Picasso, not using the xml layout.</p><pre><code>        final ImageView imageView = (ImageView) findViewById(R.id.simple_activity_a_imageView);
        Picasso.with(this)
                .load(TIGER_PIC_URL)
                .fit()
                .centerCrop()
                .into(imageView);

        Button button = (Button) findViewById(R.id.simple_activity_a_btn);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(PicassoSimpleActivityA.this, PicassoSimpleActivityB.class);
                ActivityOptionsCompat options = ActivityOptionsCompat.
                        makeSceneTransitionAnimation(PicassoSimpleActivityA.this,
                                imageView,
                                ViewCompat.getTransitionName(imageView));
                startActivity(intent, options.toBundle());
            }
        });
</code></pre><p>Here in <code>PicassoActivityA</code> we're just loading our image into the <code>ImageView</code>, nothing special if you've loaded images with Picasso before.</p><p>Also the same as in part 1 is the creation of the <code>ActivityOptionsCompat</code> so we can pass this as a bundle along with our intent so <code>PicassoActivityB</code> knows we have a Shared Element Transition to do. If this is new to you then head back to <a href="http://mikescamell.com/shared-element-transitions-part-1/">part 1</a> where I explain this in more detail.</p><p>Most of the setup code is in <code>PicassoActivityB</code>, lets take a look.</p><pre><code>    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.picasso_activity_b);
        ImageView imageView = (ImageView) findViewById(R.id.picasso_activity_b_image);

        supportPostponeEnterTransition();

        Picasso.with(this)
                .load(PicassoActivityA.TIGER_PIC_URL)
                .fit()
                .noFade()
                .centerCrop()
                .into(imageView, new Callback() {
                    @Override
                    public void onSuccess() {
                        supportStartPostponedEnterTransition();
                    }

                    @Override
                    public void onError() {
                        supportStartPostponedEnterTransition();
                    }
                });
    }
</code></pre><p>The first thing that's new here is <code>supportPostponeEnterTransition</code> on line 7. This tells the Activity to delay loading until we say it's ok to and the window is left transparent. We need this because we need to ensure that Picasso has loaded the image before we do the transition. Otherwise we'll just get some fade animation for the image. We use <code>supportPostponeEnterTransition</code> rather than <code>postponeEnterTransition</code> because in our sample app we're supporting 19. This just means we don't have to do the <code>if</code> statement to determine the SDK version.</p><p>We load our image in with Picasso, just like <code>PicassoActivityA</code> with a couple of extras. In line 12 we set <code>noFade()</code>. This is a Shared Element Transition so as such we want the image to be on screen at all times. Picasso performs a default fade so we need to turn it off.</p><p>Finally in our into we add an extra <code>Callback</code> parameter to listen for when the image has been loaded. On line 17 and line 22, within the <code>Callback</code> <code>onSuccess</code> and <code>onError</code> methods we call <code>supportStartPostponedEnterTransition</code> to say that now we're ready to start the transition and load the UI for <code>PicassoActivityB</code>. If you don't call <code>supportStartPostponedEnterTransition</code> the <code>Activity</code> will never start.</p><p>And that's it. That's all that's all that's needed extra to load. I won't go through the code doing this for a <code>Fragment</code> to <code>Fragment</code> example as it's so similar to the above and I'm sure you could work it out. I will put the  code in the github project though if you would like to see. There's only one issue I have in with <code>Fragments</code> and that's getting the returning transition back to the previous <code>Fragment</code> to operate with the image in view. If you know how what I'm missing then please let me know!</p><p>One last thing, if you want to force Picasso to use the image from the cache you'll need to set a size for the image, otherwise it won't work properly. Is it necessary? No, but the image in <code>PicassoActivityB</code> will load quicker.</p><h2 id="glide">Glide</h2><p>Glide follows a very similar pattern to the Picasso code with just a few specific Glide method changes. So if you want to know in more detail about what's going on refer to the above text.</p><p><code>GlideActivityA</code> is nothing special and pretty much identical to <code>PicassoActivityA</code> and our <code>SimpleActivityA</code> from part 1.</p><pre><code>        Glide.with(this)
                .load(FOX_PIC_URL)
                .centerCrop()
                .into(imageView);

        Button button = (Button) findViewById(R.id.glide_activity_a_btn);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(GlideActivityA.this, GlideActivityB.class);
                ActivityOptionsCompat options = ActivityOptionsCompat.
                        makeSceneTransitionAnimation(GlideActivityA.this,
                                imageView,
                                ViewCompat.getTransitionName(imageView));
                startActivity(intent, options.toBundle());
            }
        });
</code></pre><p><code>GlideActivityB</code> has a the most changes, mostly due to a different way to listen for an image loading.</p><pre><code>        supportPostponeEnterTransition();

        Glide.with(this)
                .load(GlideActivityA.FOX_PIC_URL)
                .centerCrop()
                .dontAnimate()
                .listener(new RequestListener&lt;String, GlideDrawable&gt;() {
                    @Override
                    public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) {
                        supportStartPostponedEnterTransition();
                        return false;
                    }

                    @Override
                    public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) {
                        supportStartPostponedEnterTransition();
                        return false;
                    }
                })
                .into(imageView);
</code></pre><p>Line 1 we call <code>supportPostponeEnterTransition()</code> to tell the <code>Activity</code> to wait to load until we tell it to.</p><p>On line 4 we call <code>dontAnimate()</code> which is necessary as we don't want the image to fade in when it's loaded otherwise we'll lose the transition effect.</p><p>On line 5 we set a listener for when the image has been loaded or failed to load. This is so we can call <code>supportStartPostponedEnterTransition()</code> (line 10 &amp; line 16) to start the transition and load the <code>Activity</code>. Note we return false as we want to handle all the image loading rather than doing it manually ourselves.</p><p>Using Glide and <code>Fragment</code> should be easy to work out, but like Picasso I'll include them in the source code. Glide doesn't seem to have the same issues as Picasso when it comes to the return Shared Element Transition not operating correctly with <code>Fragments</code>. Hopefully I can discover out why and update this post in future.</p><p>That source code can be found <a href="http://bit.ly/sharedelement">here</a>.</p><p>This post has been a short one as I was at hackathon this <a href="https://twitter.com/MikeScamell/status/830892953958748162">past weekend</a>. Next week we'll jump into Shared Element Transitions with <code>RecyclerView</code>.</p><p>Any questions hit me up in the comments.</p><p><em>Update (5/03/17): I've made some minor adjustments to this post since first releasing. There's nothing better than having 1000's of eyes on your work for reviewing!</em></p><p><em>Thanks to Christophe Beyls for pointing out the missing supportStartPostponedEnterTransition() in the error methods for Picasso and Glide</em></p>]]></content:encoded></item><item><title><![CDATA[Shared Element Transitions - Part 2: Fragments]]></title><description><![CDATA[A tutorial to show how to implement simple Shared Element Transitions when going from Fragment to Fragment.]]></description><link>http://localhost:2368/shared-element-transitions-part-2/</link><guid isPermaLink="false">5bf1be05ca57a5c15ec68648</guid><category><![CDATA[androiddev]]></category><category><![CDATA[sharedelementtranistions]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Tue, 07 Feb 2017 14:38:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/shared_element_part_2-4.png" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/shared_element_part_2-4.png" alt="Shared Element Transitions - Part 2: Fragments"><p>In <a href="http://mikescamell.com/shared-element-transitions-part-1/">part 1</a> we learned what Shared Element Transitions are, how they work and a simple example using <code>Activity</code> to <code>Activity</code>.</p><p>In part 2 we're going to learn a little more on how they should be used and then do a <code>Fragment</code> to <code>Fragment</code> example.</p><h2 id="guidelines">Guidelines</h2><p>There are a few things that should be kept in mind when using Shared Element Transitions. These come from the <a href="https://material.io/guidelines/motion/material-motion.html#material-motion-what-makes-a-good-transition">Material motion</a> guidelines mentioned in part 1.</p><ul><li> While we want the user to marvel at our fantastic new animation, we don't want to impede them on their journey so it's important we animate quickly. If we stagger too many animations or slow it down we're not creating a great user experience. </li><li> Don't do too many Shared Element Transitions at once. When transitioning we want the intention to be clear as possible. Too many Shared Elements potentially crossing paths or moving in different directions can just be confusing. </li><li> Be consistent. If you're using Shared Element Transitions in only one part of your app and you leave out other prime candidates, you're going to have negative impact on the users feelings towards it. It will feel incomplete and will be worse than having no Shared Element Transitions at all. As above though, this doesn't mean go crazy, but by keeping consistency you will help users understand what they mean and their intention. </li></ul><p>To see some prime examples of the above scenarios head <a href="https://material.io/guidelines/motion/material-motion.html#material-motion-what-makes-a-good-transition">here</a>.</p><h2 id="fragment-to-fragment">Fragment to Fragment</h2><p>To get started let's create a simple <code>Activity</code> to hold our <code>Fragment</code>.</p><pre><code>public class FragmentToFragmentActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_fragment_to_fragment);

        getSupportFragmentManager()
                .beginTransaction()
                .add(R.id.content, SimpleFragmentA.newInstance())
                .commit();
    }
}
</code></pre><p>Nothing special here. We're just launching our <code>SimpleFragmentA</code> in <code>onCreate</code> of our <code>FragmentToFragmentActivity</code> by adding it in a <code>Transaction</code>.</p><p>Now we need to setup our <code>SimpleFragmentA</code>. First of all lets make sure our <code>ImageView</code> in our layout XML has a <code>transitionName</code>.</p><pre><code>    &lt;ImageView
        android:id="@+id/fragment_a_imageView"
        android:layout_width="128dp"
        android:layout_height="96dp"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:layout_marginBottom="80dp"
        android:scaleType="centerCrop"
        android:src="@drawable/gorilla"
        android:transitionName="@string/simple_fragment_transition" /&gt;
</code></pre><p>Just like the <code>Activity</code> example we need to set a <code>transitionName</code> (line 10) on BOTH of the views we intend to be part of our Shared Element Transition. Now to the actual <code>Fragment</code> itself.</p><pre><code>    ...

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        final ImageView imageView = (ImageView) view.findViewById(R.id.fragment_a_imageView);

        Button button = (Button) view.findViewById(R.id.fragment_a_btn);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                SimpleFragmentB simpleFragmentB = SimpleFragmentB.newInstance();
                getFragmentManager()
                        .beginTransaction()
                        .addSharedElement(imageView, ViewCompat.getTransitionName(imageView))
                        .addToBackStack(TAG)
                        .replace(R.id.content, simpleFragmentB)
                        .commit();
            }
        });
    }
</code></pre><p>Our main concern in <code>SimpleFragmentA</code> is the <code>onViewCreated</code> method. On line 7 we're getting hold of our <code>ImageView</code> from the layout. We'll need this for the Shared Element Transition. Line 9 we're getting our button and in line 8 we're setting an <code>onClickListener</code> to get clicks to launch <code>SimpleFragmentB</code>. Line 14 is where things get interesting.</p><p>We create a <code>Transaction</code> as is normal to launch a new <code>Fragment</code>. On line 16 we actually call <code>addSharedElement</code> and, much like the <code>Activity</code> to <code>Activity</code> example from part 1, we need to give our <code>View</code> and <code>transitionName</code> as parameters. So we give our <code>ImageView</code> and our <code>transitionName</code> <s>which is located in <code>strings.xml</code> (We don't want any spelling or typing mistakes!)</s> which we just use <code>ViewCompat.getTransitionName</code> as we know the <code>transitionName</code> in both layouts is the same. Remember, it doesn't have to be and only needs to be unique in the view hierarchy.</p><p>Line 17 we call <code>addToBackStack</code>. Why? Well otherwise we won't get the nice Shared Element Transition when we press back. If this line is left out, when you press back it would just finish the <code>FragmentToFragmentActivity</code> as there's no history (or nothing in the back stack).</p><p>Line 18 we call <code>replace</code> as we want <code>SimpleFragmentB</code> to completely replace <code>SimpleFragmentA</code>.</p><p>Again not too different to how you would normally launch a <code>Fragment</code>. Finally lets get <code>SimpleFragmentB</code> setup.</p><pre><code>    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            setSharedElementEnterTransition(TransitionInflater.from(getContext()).inflateTransition(android.R.transition.move));
        }
    }
</code></pre><p>Apart from inflating our layout (not shown here) and adding a <code>transitionName</code> to the <code>ImageView</code> in our layout xml (as above in <code>SimpleFragmentA</code>), this is the only other thing we need to do.</p><p>So all we need to do is call <code>setSharedElementTransition</code> and pass in a <code>Transition</code> by inflating one provided to us from resources. This is only available on 21+, which is why we wrap it in an <code>if</code>. By default the "move" transition combines 4 different types.</p><pre><code>&lt;transitionSet xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;changeBounds/&gt;
    &lt;changeTransform/&gt;
    &lt;changeClipBounds/&gt;
    &lt;changeImageTransform/&gt;
&lt;/transitionSet&gt;
</code></pre><p>We'll go into these in a bit more detail in a future post. But for now, by using these, we're using the same default style of <code>Transition</code> that we used in the <code>Activity</code> to <code>Activity</code> example in part 1.</p><p>And that's it. If we run it, we should have something identical to part 1 except with a Gorilla 😃</p><figure class="kg-card kg-embed-card"><iframe width="459" height="344" src="https://www.youtube.com/embed/_1FlXs78fD8?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><p>The source code for part 2 can be found <a href="http://bit.ly/sharedelement">here</a> alongside part 1.</p><p>In part 3 we'll look at how we can use Picasso and Glide with Shared Element Transitions.</p><p><em>Update (5/03/17): I've made some minor adjustments to this post since first releasing. There's nothing better than having 1000's of eyes on your work for reviewing!</em></p><p><em>Thanks to Wesley Ellis, Dimitris Karittevlis and Marcos Holgado for proof reading</em></p>]]></content:encoded></item><item><title><![CDATA[Shared Element Transitions - Part 1: Activities]]></title><description><![CDATA[A tutorial to show how to implement simple Shared Element Transitions when going from Activity to Activity.]]></description><link>http://localhost:2368/shared-element-transitions-part-1/</link><guid isPermaLink="false">5bf1bd4dca57a5c15ec68640</guid><category><![CDATA[androiddev]]></category><category><![CDATA[sharedelementtranistions]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Tue, 31 Jan 2017 14:00:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/activity_transistion_feature.png" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/activity_transistion_feature.png" alt="Shared Element Transitions - Part 1: Activities"><p>Shared Element Transitions are a great way of implementing <a href="https://material.io/guidelines/motion/material-motion.html">Material motion</a> and adding some flair to your app. Shared element transitions help the user on their journey through your app by giving them a focal point as they go from screen to screen. They can make your app feel whole, rather than a bunch of separate screens slapped together. They shouldn't be abused though, in some case too many elements darting all over the screen may make the user feel a bit sick!</p><p>In part 1 I'm going to take you through creating shared element transitions for <code>Activity</code> to <code>Activity</code> scenarios. In later posts we'll explore <code>Fragment</code> to <code>Fragment</code>, <code>RecyclerView</code> and setting up some combinations. If there are any other scenarios you would like to see then please <a href="https://twitter.com/mikescamell">tweet</a> me or let me know in the comments.</p><p>Shared element transitions are only available on 21+. This won't affect older Android versions where everything reverts to a default transition when moving between screens. That is provided you've wrapped any logic appropriately so that the app doesn't crash at runtime (Android Studio should warn you about this).</p><h2 id="how-do-they-work">How do they work?</h2><p>Here's a simple example:</p><ul><li>Activity A has an image in it. When you tap the image you launch Activity B.</li><li>Activity B loads everything transparently on screen.</li><li>The framework does some calculations, finding out where the image is starting and where it's going to end, taking into consideration how it's being asked to do it (the type of transition).</li><li>It creates an <code>Animator</code> using the differences which handles moving everything for you.</li><li>The framework finally tells Activity A to hide it's shared element, runs the animator with Activity B's shared element animating into it's final position.</li></ul><p>A more detailed explanation can be found <a href="http://www.androiddesignpatterns.com/2015/01/activity-fragment-shared-element-transitions-in-depth-part3a.html">here</a> in this great article by Alex Lockwood.</p><p>Shared element transitions take place in the window's <code>ViewOverlay</code>. This overlay layer sits on top of all other views, ensuring that any shared element set doesn't get drawn over ruining the Shared Element Transition experience.</p><p>A great example is in Google Play Music. When selecting an album from a list you are transitioned to a detail screen listing the album's songs. The album cover is a shared element, transitioning from a small square to a larger one at the top of the screen.</p><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/02/shared_element_part_1_example.gif" class="kg-image" alt="Shared Element Transitions - Part 1: Activities"></figure><p>We're going to create something similar but simpler. With animals. Everyone loves animals.</p><h2 id="activity-to-activity">Activity to Activity</h2><p>First of all we need to enable <code>windowContentTransitions</code>. If you are targeting &lt;21 then you'll need to use your <code>styles.xml</code> within a <code>values-v21</code> folder. Add this line to your base application theme in the appropriate <code>styles</code> file:</p><pre><code>&lt;!-- Base application theme. --&gt;
&lt;style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"&gt;
        //add this line to your file
    &lt;item name="android:windowContentTransitions"&gt;true&lt;/item&gt;
&lt;/style&gt;
</code></pre><p>Shared element transitions from activities are simple to implement. Let's assume you have two activities, <code>ActivityA</code> and <code>ActivityB</code>. <code>ActivityA</code> contains a single button and an <code>ImageView</code>. <code>ActivityB</code> contains a larger <code>ImageView</code> at the top and some detail text underneath. Something like this:</p><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/01/a-and-b.png" class="kg-image" alt="Shared Element Transitions - Part 1: Activities"></figure><p>There are two ways of defining shared element transitions. You can do them in your XML layout using the <code>transitionName</code> attribute or programatically by calling <code>setTransitionName()</code> on a <code>View</code>. We're going to be using the former as it's easier but a future blog post will detail setting them dynamically.</p><p>First let's set the <code>transitionName</code> on BOTH our <code>ImageView</code> in our XML layouts. This is so that the framework knows where we want our transitioning <code>ImageView</code> to go. It's pretty simple, just add the attribute like so:</p><pre><code>&lt;ImageView
    android:id="@+id/simple_activity_a_imageView"
    android:layout_width="128dp"
    android:layout_height="96dp"
    android:layout_alignParentBottom="true"
    android:layout_centerHorizontal="true"
    android:layout_marginBottom="80dp"
    android:scaleType="centerCrop"
    android:src="@drawable/lion"
    android:transitionName="simple_activity_transition"
    tools:ignore="UnusedAttribute" /&gt;
</code></pre><p>Note: I'm entering the <code>String</code> for clarity in this post but I advise that you actually place this in your <code>strings.xml</code>, like I do in the source code. You may get some lint warnings if you target &lt;21 so you can either ignore them as is done above with <code>tools:ignore="UnusedAttribute"</code>.</p><p>The <code>transitionName</code> has to be unique <s>on the screen to any other element transitions you have. Otherwise you’ll just confuse the framework and may get some weird results.</s> in the view hierarchy. That means that <code>ActivityA</code> and <code>ActivityB</code> <code>ImageView</code> can have different <code>transitionName</code>. I find it easier to keep them the same but it's not necessary.</p><p>In <code>ActivityA</code> in the <code>OnClickListener</code> for our button we want the following:</p><pre><code>Intent intent = new Intent(SimpleActivityA.this, SimpleActivityB.class);
ActivityOptionsCompat options = ActivityOptionsCompat.
                       makeSceneTransitionAnimation(SimpleActivityA.this,
                            imageView,
                            ViewCompat.getTransitionName(imageView));
startActivity(intent, options.toBundle());
</code></pre><p>On line 1 we're just creating an <code>Intent</code> that we're going to use to launch <code>ActivityB</code>. In line 2 were creating a options file with <code>ActivityOptionsCompat</code> from the support library. If you're supporting 21+ you can just use <code>ActivityOptions</code>. The <code>makeSceneTransitionAnimation()</code> creates our animation. We just have to pass it 3 things. The first is simply a <code>Context</code>. Secondly we need the <code>sharedElement</code>that is transitioning which is of type <code>View</code>. Finally the <code>sharedElementName</code> which is also the <code>transitionName</code> <s>that we set on both our <code>View</code>s in our XML layouts</s> which has to match the target <code>View</code> <code>transitionName</code>. Note the last parameter should not be <code>null</code> even though it's possible to pass it in with no lint warnings 😕</p><p>We give it <code>SimpleActivityA.this</code> for our context (we're in the <code>OnClickListener</code> for the button remember). Next we pass in our <code>ImageView</code> that is transitioning. <s>Finally we pass in our <code>transitionName</code> we set on the <code>View</code>s in our layouts, <code>"simple_activity_transition"</code></s>. Finally, we use <code>ViewCompat</code> to get the <code>transitionName</code> from the <code>ImageView</code>. If <code>ActivityB</code> <code>ImageView</code> had a different <code>transitionName</code> then this it where you'd specify it.</p><p>In the last line we start our activity and add our <code>options</code> alongside it as a <code>Bundle</code>.</p><p><code>ActivityB</code> needs little setup. As long as you have added the <code>transitionName</code> to the layout for it <s>as well as set the SAME on the <code>ImageView</code></s> and it's the same one specified when creating the <code>ActivityOptionsCompat</code> in <code>ActivityB</code>, it should now just work 😃</p><figure class="kg-card kg-embed-card"><iframe width="459" height="344" src="https://www.youtube.com/embed/WXVywnBSjAo?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><p>The source code for Part 1 can be found <a href="http://bit.ly/sharedelement">here</a></p><p>In Part 2 next week we'll explore doing <code>Fragment</code> to <code>Fragment</code> shared element transitions.</p><p><em>Update (5/03/17): I've made some minor adjustments to this post since first releasing. There's nothing better than having 1000's of eyes on your work for reviewing!</em></p><p><em>Thanks to Wesley Ellis, Dimitris Karittevlis and Marcos Holgado for proof reading</em></p>]]></content:encoded></item><item><title><![CDATA[Gotcha when offline caching with OkHttp3]]></title><description><![CDATA[When trying to do offline caching with OkHttp3 and Retrofit I encountered a small gotcha that prevented me from implementing it.]]></description><link>http://localhost:2368/gotcha-when-offline-caching-with-okhttp3/</link><guid isPermaLink="false">5bf1bc8eca57a5c15ec68638</guid><category><![CDATA[androiddev]]></category><category><![CDATA[okhttp]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Sun, 22 Jan 2017 12:06:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/7spg5olfexc-roman-kraft--1-.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/7spg5olfexc-roman-kraft--1-.jpg" alt="Gotcha when offline caching with OkHttp3"><p>I recently was trying to use an offline cache with <a href="http://square.github.io/okhttp/">OkHttp</a> to store some information. This is handy if the user goes offline and we want them to still see some information.</p><p>I'd been following this great little tutorial by <a href="https://twitter.com/brwngrldev">Annyce Davis</a> on <a href="http://caster.io/">Caster.io</a>. I have used a <a href="https://github.com/square/retrofit">Retrofit</a> instance with offline caching before, but I had never actually set one up myself. In previous apps when I've needed to cache something I stored it in a database. Caching with OkHttp seems handy where you're not doing much with the data. For example if you're presenting a simple news article and want the user to be able to read offline. It would be easier than setting up the boilerplate code needed for a database.</p><p>So I got my <code>Interceptor</code> setup with <a href="https://google.github.io/dagger/">Dagger</a> and created an offline Retrofit instance.</p><pre><code>@Provides
@Singleton
@Named("offline-cache-interceptor")
Interceptor provideOfflineCacheInterceptor (final Application context) {
    return new Interceptor()
    {
        @Override
        public Response intercept (Chain chain) throws IOException
        {
            Request request = chain.request();

            if ( !NetworkUtil.isNetworkConnected(context))
            {
                CacheControl cacheControl = new CacheControl.Builder()
                        .maxStale( 1, TimeUnit.DAYS )
                        .build();

                    request = request.newBuilder()
                        .cacheControl( cacheControl )
                        .build();
            }

            return chain.proceed( request );
        }
    };
}
</code></pre><p>The service for the API I was hitting used this and I was happy. Except no offline caching. I entered the app while online and got my data, put the app in airplane mode, pressed the home button and then re-entered the app. Blank <code>TextView</code>. This frustrated me to no end.  The code looked near enough identical to all examples I could find. I delved into the files on my device looking for the cache file but nothing. So I did what I thought would be best, I left it.</p><p>A few months on and I came back to the app. I wanted to give the problem another go. I did some searching, trying to find someone with similar issues. And <a href="http://stackoverflow.com/a/32729995/3150049">boom</a>. <a href="https://twitter.com/jessewilson">Jesse Wilson</a>, creator of OkHttp, stated that POST requests can not be cached with OkHttp. What was I using? Yep, a POST. Luckily I could switch to a GET (which actually made more sense in this context). Low and behold, I had glorious offline caching.</p><p>The irony is that after I fixed this I decided that it would be better for me to store and manage this in a database.</p><p>Go figure ¯\<em>(ツ)</em>/¯</p>]]></content:encoded></item><item><title><![CDATA[This app did the VectorDrawableCompat diet and shed 2.4MB! And it’s so easy, you can do it too!]]></title><description><![CDATA[<p><em>This article was orginally posted on Medium on March 21st, 2016. You can find it <a href="https://medium.com/p/this-app-did-the-vectordrawablecompat-diet-and-shed-2-4mb-and-it-s-so-easy-you-can-do-it-too-209846d99809">here</a>.</em></p><p>If you haven’t heard already, <a href="https://medium.com/r/?url=http%3A%2F%2Fandroid-developers.blogspot.co.uk%2F2016%2F02%2Fandroid-support-library-232.html">Android now has VectorDrawableCompat</a>, hurrah!</p><p>There have been a few articles on how to use it already:</p><ul><li><a href="https://medium.com/@chrisbanes/appcompat-v23-2-age-of-the-vectors-91cbafa87c88#.teutrkhu1">AppCompat v23.2 — Age of the vectors</a> by <a href="https://twitter.com/chrisbanes">Chris Banes</a></li><li><a href="https://medium.com/r/?url=https%3A%2F%2Fblog.stylingandroid.com%2Fvectors-for-all-finally%2F">Vectors</a></li></ul>]]></description><link>http://localhost:2368/the-vector-drawable-compat-diet/</link><guid isPermaLink="false">5bf1bc04ca57a5c15ec6862f</guid><category><![CDATA[vectordrawable]]></category><category><![CDATA[vectordrawablecompat]]></category><category><![CDATA[androiddev]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Mon, 28 Mar 2016 14:16:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/this_app_did_the_title_image-3.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/this_app_did_the_title_image-3.jpg" alt="This app did the VectorDrawableCompat diet and shed 2.4MB! And it’s so easy, you can do it too!"><p><em>This article was orginally posted on Medium on March 21st, 2016. You can find it <a href="https://medium.com/p/this-app-did-the-vectordrawablecompat-diet-and-shed-2-4mb-and-it-s-so-easy-you-can-do-it-too-209846d99809">here</a>.</em></p><p>If you haven’t heard already, <a href="https://medium.com/r/?url=http%3A%2F%2Fandroid-developers.blogspot.co.uk%2F2016%2F02%2Fandroid-support-library-232.html">Android now has VectorDrawableCompat</a>, hurrah!</p><p>There have been a few articles on how to use it already:</p><ul><li><a href="https://medium.com/@chrisbanes/appcompat-v23-2-age-of-the-vectors-91cbafa87c88#.teutrkhu1">AppCompat v23.2 — Age of the vectors</a> by <a href="https://twitter.com/chrisbanes">Chris Banes</a></li><li><a href="https://medium.com/r/?url=https%3A%2F%2Fblog.stylingandroid.com%2Fvectors-for-all-finally%2F">Vectors for all (finally)</a> by <a href="https://twitter.com/MarkIAllison">Mark Allison</a></li></ul><p>They both do a good job explaining how to implement VectorDrawableCompat into your project. So I’m just going to talk about a few things I ran into and how it’s going to affect an app on the playstore.</p><p>One thing I do want to make clear, even if you’re not going to be using VectorDrawableCompat in your project, is this (paraphrasing Chris Banes):</p><p><strong><em>If you do not use the compat vector functionality yourself, you still need to make changes to your code as AppCompat needs it.</em></strong></p><p>Please be aware of this and go see his post on how to code for this. It’s just a simple copy/paste job into your gradle file.</p><h2 id="it-s-bigger-than-i-thought-that-s-what-she-said-">It’s bigger than I thought (that’s what she said)</h2><p>When I first created the <a href="https://play.google.com/store/apps/details?id=com.fixsportsstatsltd.fantasyfootballfix">Fantasy Football Fix</a> app back in December 2015 I was keen on implementing <a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html">VectorDrawables</a>. The issue I ran into was this; I wanted as many images as possible to be vector format, for as many densities as possible, from Lollipop onwards. This was a struggle because at the time there were only some third party libraries, with some being <a href="https://github.com/telly/MrVector">deprecated</a>. With this in mind, I wanted to wait for an official Google implementation. While I was waiting I had to do the following:</p><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/01/drawables_folder_overload.jpg" class="kg-image" alt="This app did the VectorDrawableCompat diet and shed 2.4MB! And it’s so easy, you can do it too!"></figure><p>Why all the folders? I needed vectors for any devices that were on Lollipop+ but I also needed folders for the devices that weren’t and for each density I was choosing to support. It was a pain, but my love of crisp images was not enough to drive me away!</p><p>All in all the app weighed in at 10.5MB (with proguard enabled). It was bigger than I first thought it would be, but I have a few libraries in there as well. It wasn’t too outrageous as far as I was concerned. The app was released successfully on the playstore and life went on. Until now.</p><h2 id="your-bum-no-longer-looks-big-in-that">Your bum no longer looks big in that</h2><p>This past weekend I decided to update the support libraries and try my hand at implementing VectorDrawableCompat to see how much weight the app could lose. Following along with Chris Banes’s article I made changes to my gradle file. I then proceeded to remove all the unnecessary drawable folders. After, it looked like this:</p><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/01/drawble_folders_reduced.jpg" class="kg-image" alt="This app did the VectorDrawableCompat diet and shed 2.4MB! And it’s so easy, you can do it too!"></figure><p>A lot better right? Because i’m using vectors for a majority of my images they can all be placed in the drawable folder. What’s leftover is a few things that I hope to move to vector format once I can get the SVGs to convert them.</p><p>Next I searched my ImageViews in XML for the <code>android:src</code> attribute and change it to <code>app:srcCompat</code>. Make sure you get them all if you decide to go all out like me. If you don’t, then you’ll likely get a crash on devices pre-Lollipop. The last thing to do was scan my code for references to setting drawables e.g. in a custom view. For example my custom PlayerView had this code at the bottom to factor in deprecation of methods:</p><pre><code>    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) {
        points.setBackground(
            ResourcesCompat.getDrawable(getResources(),
            R.drawable.bench_text_bg, 
            null));
        name.setBackground(
            ResourcesCompat.getDrawable(getResources(),
            R.drawable.bench_text_bg, 
            null));
    } else {
        points.setBackgroundDrawable(
            ResourcesCompat.getDrawable(getResources(),
            R.drawable.bench_text_bg, 
            null);
        name.setBackgroundDrawable(
            ResourcesCompat.getDrawable(getResource(), 
            R.drawable.bench_text_bg, 
            null));
    }
</code></pre><p>Now, it doesn’t matter what version of the app is being used as we’re going to be setting the images the same way. They now get set using <code>setBackgroundResource()</code> rather than <code>setImageDrawable()</code>:</p><pre><code>    points.setBackgroundResource(R.drawable.bench_text_bg);
    name.setBackgroundResource(R.drawable.bench_text_bg);
</code></pre><p>You can also do the same when setting images, just change from <code>setImageDrawable()</code> to <code>setImageResource()</code>:</p><pre><code>bottomBarRankIndicator.setImageResource(R.drawable.ic_points_up);
</code></pre><p>I did have a lint issue at one point with Android Studio v1.5 informing me that when I had set the attribute to <code>app:srcCompat</code> on an ImageView in XML. This was “Unexpected namespace prefix ‘app’ found for tag ImageView”. Despite this the app still seemed to work fine and the image shows, so it must be a false alarm.</p><h2 id="fantasy-football-fix-lost-2-4mb-this-week-everyone-let-s-give-it-a-round-of-applause-">Fantasy Football Fix lost 2.4MB this week everyone! Let’s give it a round of applause!</h2><p>So after testing this all out in debug and on all supported versions of Android I built the release. I was surprised at the difference. The app had gone from 10.5MB to 8.1MB! A 2.4MB drop. I was really happy with this. One because it removed that magic 10 number from the size, but also because the app’s second largest user country is India. And we should all know by now about trying our best to help <a href="https://vimeo.com/144804323">accommodate these users</a>, and reducing our app is size is one sure fire way to do it.</p><p>So VectorDrawableCompat is a really easy way to reduce your app size. The question is, can you beat my reduction?!</p><p><em>P.S Bonus material, go watch <a href="https://skillsmatter.com/skillscasts/6617-vector-all-the-things">Vector All the Things</a> by Mark Allison, one of my favourite droidcon London talks and should definitely swing you round to vectors</em></p>]]></content:encoded></item><item><title><![CDATA[Low Carb Chocolate Peanut Butter Bombs]]></title><description><![CDATA[<p>I've recently joined the keto brigade. I'm enjoying the weight loss and experimenting with different foods. Even if it is at the expense of carbs. I'm also enjoying all the bacon, chocolate and peanut butter!</p><p>I came across a recipe a few weeks ago about making <a href="http://healthygamergirl.com/low-carb-peanut-butter-cheesecake-protein-bars/">low carb peanut butter</a></p>]]></description><link>http://localhost:2368/low-carb-chocolate-peanut-butter-bombs/</link><guid isPermaLink="false">5bf1bb64ca57a5c15ec68627</guid><category><![CDATA[food]]></category><category><![CDATA[keto]]></category><category><![CDATA[recipe]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Sun, 20 Mar 2016 17:07:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/IMG_20160320_134706.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://localhost:2368/content/images/2018/11/IMG_20160320_134706.jpg" alt="Low Carb Chocolate Peanut Butter Bombs"><p>I've recently joined the keto brigade. I'm enjoying the weight loss and experimenting with different foods. Even if it is at the expense of carbs. I'm also enjoying all the bacon, chocolate and peanut butter!</p><p>I came across a recipe a few weeks ago about making <a href="http://healthygamergirl.com/low-carb-peanut-butter-cheesecake-protein-bars/">low carb peanut butter cheesecake protein bars</a>. They looked good and I decided I wanted to make them myself.</p><p>The issue was that I didn't want to have to pay a large sum of money for some chocolate protein powder if I didn't like them. Plus it's geared to the US. So I went about making my own version with weighted measurements and based on ingredients purchasable in the UK. Also, I used silicone fairy cake cases as that was all I had in my cupboard. So without further adieu, please let me present:</p><h2 id="the-chocolate-peanut-butter-bomb-">The Chocolate Peanut Butter Bomb!</h2><h4 id="calories">Calories</h4><p><strong>Yield:</strong> 6 Bombs<br><strong>Serving Size:</strong> 1 Bomb<br><strong>Calories per serving:</strong> 191<br><strong>Fat per serving:</strong> 13g<br><strong>Carbs per serving:</strong> 2g<br><strong>Protein per serving:</strong> 15g</p><h4 id="ingredients">Ingredients</h4><ul><li>75g <a href="http://www.myprotein.com/sports-nutrition/impact-whey-protein/10530943.html">MyProtein Impact Whey Protein</a> (there are plenty of chocolate flavours to choose from, i just went for natural chocolate)</li><li>90g <a href="http://www.mysupermarket.co.uk/tesco-price-comparison/Jam_And_Spreads/Whole_Earth_Crunchy_Original_Peanut_Butter_No_Added_Sugar_454g.html?TrackingCode=2101.eGC3DWbaUUGnvN2MC0icoQ">Whole Earth Crunchy Peanut Butter</a> (make sure you get the crunchy as it is lower in carbs)</li><li>150g <a href="http://groceries.asda.com/product/mozzarella-mascarpone/asda-mascarpone/910001327509">ASDA Marscopone</a> (you can obviously use other store brands but remember to adjust the calories and macro breakdown if you're trying to lose weight as they are not all the same)</li></ul><h4 id="instructions">Instructions</h4><ul><li>First you should weigh out the 75g of protein powder in a bowl. Place to oneside.</li></ul><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/01/IMG_20160313_130619.jpg" class="kg-image" alt="Low Carb Chocolate Peanut Butter Bombs"></figure><ul><li>In a seperate bowl, weigh the out the 90g peanut butter and 150g mascarpone.</li></ul><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/01/IMG_20160313_130409.jpg" class="kg-image" alt="Low Carb Chocolate Peanut Butter Bombs"></figure><ul><li>Mix the peanut butter and mascarpone together till well blended. This will be pretty tough due to their consistency. You can use your hands if you like, but they will get very messy! I personally use a fork to remove the temptation to lick my fingers after :D</li></ul><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/01/IMG_20160313_130809.jpg" class="kg-image" alt="Low Carb Chocolate Peanut Butter Bombs"></figure><ul><li>Add the chocolate protein powder and mix! At first it will be lumpy, but persevere and eventually it should become a sticky goo, it reminds me a bit of a thicker version of the inside of a mars bar.</li></ul><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/01/IMG_20160313_134734.jpg" class="kg-image" alt="Low Carb Chocolate Peanut Butter Bombs"></figure><ul><li>Once you have attained this goo like state you have two choices. Place back in the fridge for an hour or two so that the mixture firms up. Or you can just start placing the mixture into the fairy cake cases. Choice one makes it a bit easier to make the ball structure where as choice two gets it out of the way. Either way, dish out the mixture evenly between all 6 cases. For me, it is roughly 3 tbsp + 3/4 tsp per case.</li></ul><p>When you're finished you should have something like this:</p><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2017/01/IMG_20160313_132808-1.jpg" class="kg-image" alt="Low Carb Chocolate Peanut Butter Bombs"></figure><p>I have left 6 in the fridge, covered, and ate them over consecutive days and there seemed to be no issue with them going off, but your mileage may vary.</p><h2 id="enjoy-">Enjoy!</h2>]]></content:encoded></item><item><title><![CDATA[5 Weeks Training for 36 seconds]]></title><description><![CDATA[<h3 id="this-past-sunday-saw-me-compete-in-the-annual-white-rose-varsity-against-the-university-of-york-">This past Sunday saw me compete in the annual White Rose Varsity against the University of York.</h3><p>If you couldn't tell by my picture it was in the sport of MMA (Mixed Martial Arts) If you don't know what MMA is maybe a few of the big name organisations like</p>]]></description><link>http://localhost:2368/5-weeks-training-for-36-seconds/</link><guid isPermaLink="false">5bf1ad66ca57a5c15ec6861b</guid><category><![CDATA[MMA]]></category><category><![CDATA[University]]></category><dc:creator><![CDATA[Mike Scamell]]></dc:creator><pubDate>Thu, 21 Feb 2013 12:34:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/11/5-weeks-for-36-seconds-feature.jpg" medium="image"/><content:encoded><![CDATA[<h3 id="this-past-sunday-saw-me-compete-in-the-annual-white-rose-varsity-against-the-university-of-york-">This past Sunday saw me compete in the annual White Rose Varsity against the University of York.</h3><img src="http://localhost:2368/content/images/2018/11/5-weeks-for-36-seconds-feature.jpg" alt="5 Weeks Training for 36 seconds"><p>If you couldn't tell by my picture it was in the sport of MMA (Mixed Martial Arts) If you don't know what MMA is maybe a few of the big name organisations like UFC, Strikeforce and Bellator may help you realise what it is.</p><p>Still don't know? OK I normally have to default to this for people to understand. Cage Fighting. Except in this case there was no cage. The competition itself is only amateur rules. This means there were no head shots standing or on the ground, no head kicks, no knees to the head and a few other rules which keeps damage to opponents quite low. Seeing as we are University students and had to get up the next day for lectures this is probably for the best. But it hasn't stopped me having thoughts about moving up to semi-pro. That's a whole other post.</p><p>I have been training hard for roughly 5-6 weeks. Since the start of the new year I have been cutting weight. I have been eating roughly 1800kcal a day to get from my normal weight of 80kg (12.6 Stone) down to my fighting weight of 70kg (11 Stone). I had done this last year but from a lesser weight and with my training being a bit less intense. This year however I had stepped it up a gear to be in order to be the best I could be on the day. It was very tough mentally and physically but I do enjoy a challenge especially if it's of endurance. There were times I was very sore and weak but still had to train, times when I was lifting weights and having to fall to my knees after as i felt light-headed. Despite this I really enjoyed it, I may have moaned a bit (which my amazingly understanding girlfriend Katie bore the brunt of) but I knew that at the end of it I was going to be a ripped, lean 70kg. And that's what happened. I don't think I've ever seen all six abdominal muscles and so many veins on my body then on the days leading up to the weigh ins.</p><p>Fight day came around quick and on Sunday morning at 11am we had weigh ins. I stopped drinking and eating from 9pm on the Saturday so knew that I would weigh in on target. I weighed in at 70.5kg. We had a tolerance of 1kg above the weight class to compensate for the fact that we are not professionals and have a lot to do with our courses as well as our MMA training. The guy i was fighting, also called Michael, weighed in at 71.5kg. This meant he had to hit the sauna and lose the 0.5kg in order for the fight to go ahead as scheduled. I was feeling good about this as this meant he had less time to recover and put fuel in his body.  I went home and stuffed my face full of carbohydrates and water to fuel me and to also gain weight so as to have an advantage. I probably stuffed my face too much. Luckily i had my brother Peter with me leading up to the fight to help distract but also listen to my thoughts and worries.</p><p>At 4pm we got to Asylum, the University of Hull's night club where the event was being held and helped get everything organised. The place slowly but surely filled out. There were apparently at least 300 people but if I'm honest it felt like so much more. The place was buzzing with anticipation.</p><p>The fights started with an exhibition fight between Catherine (Hull) and Nettie (York) which Catherine despite her battling lost to a decision. Next up was another exhibition with John (Hull) vs Conrad (York). John had competed in the boxing earlier in the day so I had a lot of respect for him for fighting again. He hit a very nice liver shot but funnily walked away before he realised he needed to capitalise on it. He won via decision.</p><p>Next up was Phil (Hull) vs A stand in York fighter, the first proper scoring fight of the day. Phil's original opponent didn't make weight but luckily York had a few other 70kg fighters with them. Phil fought hard and got some good take downs but the other fighters counter throws were probably what threw the decision his way which put the score at 1-0 to York. Next up was Keith (Hull) vs Jonathan (York). Keith came into the injured fight with a bad shoulder but his strength lies in his BJJ (Brazilian Jiu Jitsu) so I was hoping it wouldn't affect him too much. We knew of Jonathan from last years Varsity and knew he was a very good Judo practitioner. He promptly got hold of Keith threw him to the ground and worked on a submission which he got. I believe it was a Kimura. The score was now 2-0 to York.</p><p>At this point I disappeared to a secluded area set up for us in the Student Union to warm up and mentally prepare myself. While I was doing this Adam (Hull) took on Reda (York). Adam has a Judo background and very decisively outclassed his opponent who didn't seem to be on the same level, but was still very game for a fight. Adam won via decision to set the score to 2-1 to York. The stage was set for a fight back. The next fight was Luc (Hull) vs Herbert (York) . This was a very intense fight with a lot of punches,  kicks, takedowns and a few illegal shots. This is the sort of fight people love to see. Although it was not very technical I did think it was a great slog of a fight which Luc deservedly won much to the displeasure of the York fighter. It was now level at 2-2.</p><p>It was now my turn to fight. Standing at the side my coach and cornerman Louis told me to keep technical, calm and measured. It was great to have him in my corner there along with Mark the HUMMA captain, two people who I have respect for and who I learn from. I wasn't as nervous as I was last year. I wasn't too fazed by the crowd. I learnt last year to concentrate every single bit of my attention on my opponent. I did this by staring him down (even though he wasn't looking before the fight was announced). I was looking for the psychological edge as well as getting myself psyched up. The fight was announced and I received a huge roar with my name. It felt fantastic. Stepping to the middle the referee checked me over for protective equipment and explained that he would stop the fight if things got ridiculous like the last fight. Me and Michael touched gloves. I started to feel the weight of expectation as I stepped back. I could win this event for Hull, the club, but most importantly for myself.</p><p>Stepping to the middle we touched gloves once again and I started to throw my jab out, keeping to Louis's advice. I then threw a flurry of punches which were technically atrocious but I can't explain how unnatural it feels to not be punching to someone's head. He took them and threw a leg kick which didn't feel too strong. I decided to reply with an inside leg kick which made good connection. I then followed up with a outside leg kick which he anticipated and so he shot for the take-down.</p><p>I was slightly worried at this point. Michael has a BJJ background so I knew this is where he would be strongest and despite my hard training I knew this is where he would probably have the advantage. Admittedly I didn't think he would actively go for the takedown which was my mistake and something I'll be more cautious about in the future.</p><p>The only problem with his takedown, in spite of the nice turn as he grabbed me, was his head position. During sparring from the weeks leading up to the fight I had been catching many sparring partners in guillotines as they leave their head too low when they shoot in. Sometimes they would tap or sometimes they would successfully escape. Now I knew I was going to the ground so I wanted some sort of control. My right hand instinctively went around the underside of his neck but the next part was a bit surprising even for myself.</p><p>I had been playing around with a choke called the Brabo choke from guard (It's normally done with an arm in but I had been doing it just around the neck) It turned out this is actually called a Ninja choke. I knew people struggled to get out with it from practicing with it so I bought my left arm to my right and locked my right hand on my left bicep and hunched my shoulders over his to reduce space. I then pulled tight and squeezed and I mean really squeezed.</p><p>He moved around briefly, but he just couldn't unwrap my hands. I realised now that I could have ended it quicker if I had him in full guard or half guard. At the time I was focused on getting the choke on solidly. I turned to my right and pulled him in. He wasn't tapping.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="http://localhost:2368/content/images/2018/11/860790_10151289831521674_1336280531_o--1-.jpg" class="kg-image" alt="5 Weeks Training for 36 seconds"><figcaption>Sinking the ninja choke in</figcaption></figure><p>I couldn't believe that he wouldn't tap. I was then very worried as I thought if he's not tapping to this and this was one of the most solid, technically sound chokes I had ever done(It by all means doesn't mean it was perfect) then he may just dominate me on the ground. It turns out he didn't tap because he had gone unconscious. I don't think he had much time to tap and I don't think it was an ego thing where he decided he would never tap. I just think he got caught out.The referee tapped my legs and pushed me off to try to get air going back into Michael's body.  Michael later told me he had never had a such a tight choke put on him before. Training can only prepare you for so much.</p><p>I had won and proceeded to let a huge yell of relief as I stood up. I initially hadn't realised he was unconscious till I turned round. It was quite disturbing to see him lying there face down on the mat.</p><p>Katie then proceeded to storm onto the mats and jump on me. I would never have done as well without her support.</p><p>I turned back around to see Michael standing and seemingly fine. We exchanged well done's and shook hands. He seems to be a really nice guy. The referee took my hand and raised it and never has it felt like the weight of the world was off my shoulders. I was ecstatic. Here's just one of the videos. I'm going to be working on making my own highlight video with various camera footage. It will be my first step into proper video editing outside Windows Movie Maker. I'm considering using Sony Vegas or Adobe Premiere. For now, here's one recorded by my friend Phil.</p><p>So 5 weeks hard training for 36 seconds of fighting. Enjoy.</p><figure class="kg-card kg-embed-card"><iframe width="480" height="270" src="https://www.youtube.com/embed/2PdgY35PnmE?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure>]]></content:encoded></item></channel></rss>